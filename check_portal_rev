#!/usr/bin/python
"""
 check_portal_rev for nagios
 Copyright 2014: europeana   License: EUPL
 Written by: Jacob.Lundqvist@europeana.eu
 jaclu 2014-04-07 vers 0.1.3

 Either just displays portal rev, or ensures specific version
"""


from naglib.nagiosplugin import NagiosPlugin





class PortalRev(NagiosPlugin):
    VERSION = '1.0.2' # integrated with NagiosPlugin baseclass
    DESCRIPTION = "Displays portal version"
    MSG_LABEL = 'PortVers'
    CMD_LINE_HINT = 'check_portal_rev host'

    def custom_options(self, parser):
        parser.add_option("-r", "--revision", dest="revision")
        parser.add_option("-V", "--vers", dest="vers")
        parser.add_option("-b", "--build_time", dest="build_time")

    def workload(self):
        if len(self.args) < 1:
            self.exit_help('Mandatory param missing')
        host = self.args[0]
        cmd = 'curl %s/portal/build.txt' % (host)
        retcode,stdout,stderr = self.cmd_execute_output(cmd)
        if retcode:
            self.exit_crit('Command failed')
        parts = stdout.split()

        rev = parts[1]
        build_time = parts[4] + ' ' + parts[5]
        version = parts[-3]
        branch = parts[-1].replace(')','')

        if self.options.revision:
            if rev != self.options.revision:
                self.exit_crit('ERROR: Revision: %s (expected: %s)' % (rev, self.options.revision))

        if self.options.build_time:
            if build_time.find(self.options.build_time) < 0:
                self.exit_crit('ERROR: Build: %s (expected: %s)' % (build_time, self.options.build_time))

        if self.options.vers:
            if version != self.options.vers:
                self.exit_crit('ERROR: Version: %s (expected: %s)' % (version, self.options.vers))

        self.exit_ok('OK: vers:%s branch:%s rev:%s build:%s' % (version, branch, rev, build_time))


if __name__ == "__main__":
    PortalRev().run()
