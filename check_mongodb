#!/usr/bin/env python3

import os
import time

from naglib.nagiosplugin import NagiosPlugin, NAG_WARNING, NAG_CRITICAL, NAG_OK
#from naglib.timeunits import TimeUnits

import time, os, stat
import tempfile




class CheckMongoDb(NagiosPlugin):
    VERSION = '1.2.1'
    DESCRIPTION = "Warns if back-log of thumblr2 files is to large, or oldest file waiting is to old"
    MSG_LABEL = 'MongoDB'
    CMD_LINE_HINT = 'database collection/special_query [filter]'
    HELP = """
    If second param contains no dot (.) it is assumed to be a collection
    and test will succeed if this collection has more than zero records.

    If there is a dot this is assumed to be a full query and it will be run as given
      example: db.record.findOne()

    If a filter option is given, this is piped in after the mongodb call, usefull for a grep or regexp
        in combination with a special query to verify specific content is available
        it is assumed a post_cmd will generate output if successfull
        empty result is assumed to be a failed test
    """

    def custom_options(self, parser):
        parser.add_option("-u", '--username', dest="username", default='')
        parser.add_option("-p", '--password', dest="password", default='')
        parser.add_option("-f", '--filter', dest="filter", default='')
        parser.add_option("-m", '--mongo', dest="mongo_cmd", default='mongo')


    def workload(self):
        if len(self.args) < 2:
            self.exit_help('Mandatory param missing')
        database = self.args[0]
        query = self.args[1]

        is_record_count = False
        if query.find('.') == -1:
            is_record_count = True
            query = 'db.%s.count()' % query

        f = tempfile.NamedTemporaryFile(prefix="check_mongodb-")
        auth = self.auth_me()
        if auth:
            f.write('use admin\n')
            f.write('%s\n' % auth)
        f.write('use %s\n' % database)
        f.write('%s\n' % query)

        f.flush()
        print(f.name)
        cmd = 'cat "%s"|%s --quiet' % (f.name, self.options.mongo_cmd)

        if self.options.filter:
            cmd += ' | %s' % self.options.filter
        retcode, stdout, stderr = self.cmd_execute_output(cmd)
        f.close()
        if stderr:
            self.exit_crit(stderr)
        elif retcode ==1 and stdout=='':
            #
            if cmd.find('grep') > -1:
                self.exit_crit('grep did not find a match: %s' % self.options.filter)
            self.exit_crit('cmd failed, no output recieved')
        elif retcode:
            self.exit_crit('cmd failed %s' % stdout)

        if self.options.filter:
            output = stdout.strip()
        else:
            output = '\n'.join(stdout.split('\n')[3:]).strip()
        if is_record_count:
            try:
                msg = 'Found %i items' % int(output)
            except:
                self.exit_crit(output)
        elif self.options.filter and stdout:
            msg = 'post filter matched'
        else:
            self.exit_crit('Other error')

        self.exit_ok(msg)


    def auth_me(self):
        if self.options.username == '' and self.options.password == '':
            return ''
        return "db.auth('%s','%s')" % (self.options.username, self.options.password)


if __name__ == "__main__":
    CheckMongoDb().run()
