#!/usr/bin/env python
"""
If you cant install the nagios check_http you can use this instead...

"""

import time
import urllib2
try:
    from urllib.parse import urlparse
except:
    from urlparse import urlparse

from naglib.nagiosplugin import NagiosPlugin, NAG_CRITICAL, NAG_OK



class SolrCount(NagiosPlugin):
    VERSION = '1.0.2'
    DEFAULT_REL_URL = '/solr/search/select?q=*:*&rows=0'
    CMD_LINE_HINT  ='url itemcount'
    HELP = """
    if only http://adr[:port] is used

       %s

    will be appended.

    """ % DEFAULT_REL_URL

    def workload(self):
        if len(self.args) != 2:
            self.exit_help('Mandatory param missing')
        url, count = self.args

        o = urlparse(url)
        if not o.path:
            url += self.DEFAULT_REL_URL

        try:
            count = int(count)
        except:
            self.exit_help('itemcount needs to be a number')
        if self.options.verbose > 1:
            print 'url: %s' % url
            print 'expected item count: %i' % count
        t1 = time.time()
        content = self.check_url(url)
        remote_count = self.extract_actual_count(content)
        if count != remote_count:
            self.exit_crit('Expected %i items, found %i - diff %i' % (count, remote_count, remote_count - count))
        t2 = time.time() - t1
        self.add_perf_data('response time', t2)
        self.exit(NAG_OK, 'Itemcount as expected: %i' % count)


    def check_url(self, url, timeout=10):
        t1 = time.time()
        try:
            f = urllib2.urlopen(url, timeout=timeout)
        except urllib2.HTTPError, e:
            self.exit_crit('HTTP error:%i - %s' % (e.code,e.msg))
        except:
            if time.time() > t1 + timeout:
                self.exit_crit('timeout')
            self.exit_crit( 'unknwon failure processing url - maybe not responding?')
        if f.code != 200:
            self.exit_crit( '%s %s' % (f.code, f.msg))
        content = f.read()
        return content


    def extract_actual_count(self, content):
        parts = content.split('numFound="')
        if len(parts) < 2:
            self_exit_crit('numFound not found in output')
        try:
            actual_count = int(parts[1].split('"')[0])
        except:
            self_exit_crit('numFound found but no itemcount')
        return actual_count

if __name__ == "__main__":
    SolrCount().run()

